/**
 * Covid19 Citizen Portal
 * Covid19 Citizen Portal
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "https://covid19.int.xcp/api/v1".replace(/\/+$/, "");
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 * AuthorizationcontrollerApi - fetch parameter creator
 */
exports.AuthorizationcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary Sent SMS with auth code
     * @param sendCodeRequest send sms login request dto
     */
    sendCodeUsingPOST: function (params, options) {
        // verify required parameter "sendCodeRequest" is set
        if (params["sendCodeRequest"] == null) {
            throw new Error("Missing required parameter sendCodeRequest when calling sendCodeUsingPOST");
        }
        var baseUrl = "/authorizations/send-code";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["sendCodeRequest"]) {
            fetchOptions.body = JSON.stringify(params["sendCodeRequest"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Verify code from SMS
     * @param personUid Uid of person
     * @param smsCode Code received in SMS
     */
    verifyCodeUsingPOST: function (params, options) {
        var baseUrl = "/authorizations/verify-code";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "personUid": params["personUid"],
            "smsCode": params["smsCode"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AuthorizationcontrollerApi - functional programming interface
 */
exports.AuthorizationcontrollerApiFp = {
    /**
     *
     * @summary Sent SMS with auth code
     * @param sendCodeRequest send sms login request dto
     */
    sendCodeUsingPOST: function (params, options) {
        var fetchArgs = exports.AuthorizationcontrollerApiFetchParamCreator.sendCodeUsingPOST(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Verify code from SMS
     * @param personUid Uid of person
     * @param smsCode Code received in SMS
     */
    verifyCodeUsingPOST: function (params, options) {
        var fetchArgs = exports.AuthorizationcontrollerApiFetchParamCreator.verifyCodeUsingPOST(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AuthorizationcontrollerApi - object-oriented interface
 */
var AuthorizationcontrollerApi = (function (_super) {
    __extends(AuthorizationcontrollerApi, _super);
    function AuthorizationcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     *
     * @summary Sent SMS with auth code
     * @param sendCodeRequest send sms login request dto
     */
    AuthorizationcontrollerApi.prototype.sendCodeUsingPOST = function (params, options) {
        return exports.AuthorizationcontrollerApiFp.sendCodeUsingPOST(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Verify code from SMS
     * @param personUid Uid of person
     * @param smsCode Code received in SMS
     */
    AuthorizationcontrollerApi.prototype.verifyCodeUsingPOST = function (params, options) {
        return exports.AuthorizationcontrollerApiFp.verifyCodeUsingPOST(params, options)(this.fetch, this.basePath);
    };
    return AuthorizationcontrollerApi;
}(BaseAPI));
exports.AuthorizationcontrollerApi = AuthorizationcontrollerApi;
;
/**
 * AuthorizationcontrollerApi - factory interface
 */
exports.AuthorizationcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary Sent SMS with auth code
         * @param sendCodeRequest send sms login request dto
         */
        sendCodeUsingPOST: function (params, options) {
            return exports.AuthorizationcontrollerApiFp.sendCodeUsingPOST(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Verify code from SMS
         * @param personUid Uid of person
         * @param smsCode Code received in SMS
         */
        verifyCodeUsingPOST: function (params, options) {
            return exports.AuthorizationcontrollerApiFp.verifyCodeUsingPOST(params, options)(fetch, basePath);
        },
    };
};
/**
 * CodebookcontrollerApi - fetch parameter creator
 */
exports.CodebookcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary getCodebookItems
     * @param codebook Codebook code
     */
    getCodebookItemsUsingGET: function (params, options) {
        // verify required parameter "codebook" is set
        if (params["codebook"] == null) {
            throw new Error("Missing required parameter codebook when calling getCodebookItemsUsingGET");
        }
        var baseUrl = "/codebooks/{codebook}"
            .replace("{" + "codebook" + "}", "" + params["codebook"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * CodebookcontrollerApi - functional programming interface
 */
exports.CodebookcontrollerApiFp = {
    /**
     *
     * @summary getCodebookItems
     * @param codebook Codebook code
     */
    getCodebookItemsUsingGET: function (params, options) {
        var fetchArgs = exports.CodebookcontrollerApiFetchParamCreator.getCodebookItemsUsingGET(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * CodebookcontrollerApi - object-oriented interface
 */
var CodebookcontrollerApi = (function (_super) {
    __extends(CodebookcontrollerApi, _super);
    function CodebookcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     *
     * @summary getCodebookItems
     * @param codebook Codebook code
     */
    CodebookcontrollerApi.prototype.getCodebookItemsUsingGET = function (params, options) {
        return exports.CodebookcontrollerApiFp.getCodebookItemsUsingGET(params, options)(this.fetch, this.basePath);
    };
    return CodebookcontrollerApi;
}(BaseAPI));
exports.CodebookcontrollerApi = CodebookcontrollerApi;
;
/**
 * CodebookcontrollerApi - factory interface
 */
exports.CodebookcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary getCodebookItems
         * @param codebook Codebook code
         */
        getCodebookItemsUsingGET: function (params, options) {
            return exports.CodebookcontrollerApiFp.getCodebookItemsUsingGET(params, options)(fetch, basePath);
        },
    };
};
/**
 * HealthcheckcontrollerApi - fetch parameter creator
 */
exports.HealthcheckcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary Add result of a health check test
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param testResultDto Health check test result
     */
    postHeathCheckTestResult: function (params, options) {
        // verify required parameter "personUid" is set
        if (params["personUid"] == null) {
            throw new Error("Missing required parameter personUid when calling postHeathCheckTestResult");
        }
        // verify required parameter "testResultDto" is set
        if (params["testResultDto"] == null) {
            throw new Error("Missing required parameter testResultDto when calling postHeathCheckTestResult");
        }
        var baseUrl = "/bo/persons/{personUid}/health-check/test-result"
            .replace("{" + "personUid" + "}", "" + params["personUid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["testResultDto"]) {
            fetchOptions.body = JSON.stringify(params["testResultDto"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Fills exposure form
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param exposureDto Health check&#39;s data - exposure
     */
    putHealthCheckExposure: function (params, options) {
        // verify required parameter "personUid" is set
        if (params["personUid"] == null) {
            throw new Error("Missing required parameter personUid when calling putHealthCheckExposure");
        }
        // verify required parameter "exposureDto" is set
        if (params["exposureDto"] == null) {
            throw new Error("Missing required parameter exposureDto when calling putHealthCheckExposure");
        }
        var baseUrl = "/app/persons/{personUid}/health-check/exposure"
            .replace("{" + "personUid" + "}", "" + params["personUid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["exposureDto"]) {
            fetchOptions.body = JSON.stringify(params["exposureDto"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Fills actual health check form
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param symptomsDto Health check&#39;s data - simptoms
     */
    putHealthCheckSymptoms: function (params, options) {
        // verify required parameter "personUid" is set
        if (params["personUid"] == null) {
            throw new Error("Missing required parameter personUid when calling putHealthCheckSymptoms");
        }
        // verify required parameter "symptomsDto" is set
        if (params["symptomsDto"] == null) {
            throw new Error("Missing required parameter symptomsDto when calling putHealthCheckSymptoms");
        }
        var baseUrl = "/app/persons/{personUid}/health-check/symptoms"
            .replace("{" + "personUid" + "}", "" + params["personUid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["symptomsDto"]) {
            fetchOptions.body = JSON.stringify(params["symptomsDto"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Fills testing place form
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param testingPlaceDto Health check&#39;s data - testing place
     */
    putHealthCheckTestingPlace: function (params, options) {
        // verify required parameter "personUid" is set
        if (params["personUid"] == null) {
            throw new Error("Missing required parameter personUid when calling putHealthCheckTestingPlace");
        }
        // verify required parameter "testingPlaceDto" is set
        if (params["testingPlaceDto"] == null) {
            throw new Error("Missing required parameter testingPlaceDto when calling putHealthCheckTestingPlace");
        }
        var baseUrl = "/app/persons/{personUid}/health-check/testing-place"
            .replace("{" + "personUid" + "}", "" + params["personUid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["testingPlaceDto"]) {
            fetchOptions.body = JSON.stringify(params["testingPlaceDto"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * HealthcheckcontrollerApi - functional programming interface
 */
exports.HealthcheckcontrollerApiFp = {
    /**
     *
     * @summary Add result of a health check test
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param testResultDto Health check test result
     */
    postHeathCheckTestResult: function (params, options) {
        var fetchArgs = exports.HealthcheckcontrollerApiFetchParamCreator.postHeathCheckTestResult(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Fills exposure form
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param exposureDto Health check&#39;s data - exposure
     */
    putHealthCheckExposure: function (params, options) {
        var fetchArgs = exports.HealthcheckcontrollerApiFetchParamCreator.putHealthCheckExposure(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Fills actual health check form
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param symptomsDto Health check&#39;s data - simptoms
     */
    putHealthCheckSymptoms: function (params, options) {
        var fetchArgs = exports.HealthcheckcontrollerApiFetchParamCreator.putHealthCheckSymptoms(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Fills testing place form
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param testingPlaceDto Health check&#39;s data - testing place
     */
    putHealthCheckTestingPlace: function (params, options) {
        var fetchArgs = exports.HealthcheckcontrollerApiFetchParamCreator.putHealthCheckTestingPlace(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * HealthcheckcontrollerApi - object-oriented interface
 */
var HealthcheckcontrollerApi = (function (_super) {
    __extends(HealthcheckcontrollerApi, _super);
    function HealthcheckcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     *
     * @summary Add result of a health check test
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param testResultDto Health check test result
     */
    HealthcheckcontrollerApi.prototype.postHeathCheckTestResult = function (params, options) {
        return exports.HealthcheckcontrollerApiFp.postHeathCheckTestResult(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Fills exposure form
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param exposureDto Health check&#39;s data - exposure
     */
    HealthcheckcontrollerApi.prototype.putHealthCheckExposure = function (params, options) {
        return exports.HealthcheckcontrollerApiFp.putHealthCheckExposure(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Fills actual health check form
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param symptomsDto Health check&#39;s data - simptoms
     */
    HealthcheckcontrollerApi.prototype.putHealthCheckSymptoms = function (params, options) {
        return exports.HealthcheckcontrollerApiFp.putHealthCheckSymptoms(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Fills testing place form
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param testingPlaceDto Health check&#39;s data - testing place
     */
    HealthcheckcontrollerApi.prototype.putHealthCheckTestingPlace = function (params, options) {
        return exports.HealthcheckcontrollerApiFp.putHealthCheckTestingPlace(params, options)(this.fetch, this.basePath);
    };
    return HealthcheckcontrollerApi;
}(BaseAPI));
exports.HealthcheckcontrollerApi = HealthcheckcontrollerApi;
;
/**
 * HealthcheckcontrollerApi - factory interface
 */
exports.HealthcheckcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary Add result of a health check test
         * @param personUid Unique Person&#39;s ID (person_uid.person)
         * @param testResultDto Health check test result
         */
        postHeathCheckTestResult: function (params, options) {
            return exports.HealthcheckcontrollerApiFp.postHeathCheckTestResult(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Fills exposure form
         * @param personUid Unique Person&#39;s ID (person_uid.person)
         * @param exposureDto Health check&#39;s data - exposure
         */
        putHealthCheckExposure: function (params, options) {
            return exports.HealthcheckcontrollerApiFp.putHealthCheckExposure(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Fills actual health check form
         * @param personUid Unique Person&#39;s ID (person_uid.person)
         * @param symptomsDto Health check&#39;s data - simptoms
         */
        putHealthCheckSymptoms: function (params, options) {
            return exports.HealthcheckcontrollerApiFp.putHealthCheckSymptoms(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Fills testing place form
         * @param personUid Unique Person&#39;s ID (person_uid.person)
         * @param testingPlaceDto Health check&#39;s data - testing place
         */
        putHealthCheckTestingPlace: function (params, options) {
            return exports.HealthcheckcontrollerApiFp.putHealthCheckTestingPlace(params, options)(fetch, basePath);
        },
    };
};
/**
 * PersoncontrollerApi - fetch parameter creator
 */
exports.PersoncontrollerApiFetchParamCreator = {
    /**
     *
     * @summary GET all persons
     */
    getAllPersons: function (options) {
        var baseUrl = "/bo/persons/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary GET actual person and health status
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     */
    getPerson: function (params, options) {
        // verify required parameter "personUid" is set
        if (params["personUid"] == null) {
            throw new Error("Missing required parameter personUid when calling getPerson");
        }
        var baseUrl = "/app/persons/{personUid}"
            .replace("{" + "personUid" + "}", "" + params["personUid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Updates actual person's and health status
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param personDto Person&#39;s data
     */
    putPerson: function (params, options) {
        // verify required parameter "personUid" is set
        if (params["personUid"] == null) {
            throw new Error("Missing required parameter personUid when calling putPerson");
        }
        // verify required parameter "personDto" is set
        if (params["personDto"] == null) {
            throw new Error("Missing required parameter personDto when calling putPerson");
        }
        var baseUrl = "/app/persons/{personUid}"
            .replace("{" + "personUid" + "}", "" + params["personUid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["personDto"]) {
            fetchOptions.body = JSON.stringify(params["personDto"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PersoncontrollerApi - functional programming interface
 */
exports.PersoncontrollerApiFp = {
    /**
     *
     * @summary GET all persons
     */
    getAllPersons: function (options) {
        var fetchArgs = exports.PersoncontrollerApiFetchParamCreator.getAllPersons(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary GET actual person and health status
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     */
    getPerson: function (params, options) {
        var fetchArgs = exports.PersoncontrollerApiFetchParamCreator.getPerson(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Updates actual person's and health status
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param personDto Person&#39;s data
     */
    putPerson: function (params, options) {
        var fetchArgs = exports.PersoncontrollerApiFetchParamCreator.putPerson(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PersoncontrollerApi - object-oriented interface
 */
var PersoncontrollerApi = (function (_super) {
    __extends(PersoncontrollerApi, _super);
    function PersoncontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     *
     * @summary GET all persons
     */
    PersoncontrollerApi.prototype.getAllPersons = function (options) {
        return exports.PersoncontrollerApiFp.getAllPersons(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary GET actual person and health status
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     */
    PersoncontrollerApi.prototype.getPerson = function (params, options) {
        return exports.PersoncontrollerApiFp.getPerson(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Updates actual person's and health status
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param personDto Person&#39;s data
     */
    PersoncontrollerApi.prototype.putPerson = function (params, options) {
        return exports.PersoncontrollerApiFp.putPerson(params, options)(this.fetch, this.basePath);
    };
    return PersoncontrollerApi;
}(BaseAPI));
exports.PersoncontrollerApi = PersoncontrollerApi;
;
/**
 * PersoncontrollerApi - factory interface
 */
exports.PersoncontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary GET all persons
         */
        getAllPersons: function (options) {
            return exports.PersoncontrollerApiFp.getAllPersons(options)(fetch, basePath);
        },
        /**
         *
         * @summary GET actual person and health status
         * @param personUid Unique Person&#39;s ID (person_uid.person)
         */
        getPerson: function (params, options) {
            return exports.PersoncontrollerApiFp.getPerson(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Updates actual person's and health status
         * @param personUid Unique Person&#39;s ID (person_uid.person)
         * @param personDto Person&#39;s data
         */
        putPerson: function (params, options) {
            return exports.PersoncontrollerApiFp.putPerson(params, options)(fetch, basePath);
        },
    };
};
/**
 * TreatmentcontrollerApi - fetch parameter creator
 */
exports.TreatmentcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary Fills actual data about treatment for covid19 positive patients
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param treatmentDto Treatment&#39;s data
     */
    putTreatment: function (params, options) {
        // verify required parameter "personUid" is set
        if (params["personUid"] == null) {
            throw new Error("Missing required parameter personUid when calling putTreatment");
        }
        // verify required parameter "treatmentDto" is set
        if (params["treatmentDto"] == null) {
            throw new Error("Missing required parameter treatmentDto when calling putTreatment");
        }
        var baseUrl = "/app/persons/{personUid}/treatment"
            .replace("{" + "personUid" + "}", "" + params["personUid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["treatmentDto"]) {
            fetchOptions.body = JSON.stringify(params["treatmentDto"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * TreatmentcontrollerApi - functional programming interface
 */
exports.TreatmentcontrollerApiFp = {
    /**
     *
     * @summary Fills actual data about treatment for covid19 positive patients
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param treatmentDto Treatment&#39;s data
     */
    putTreatment: function (params, options) {
        var fetchArgs = exports.TreatmentcontrollerApiFetchParamCreator.putTreatment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * TreatmentcontrollerApi - object-oriented interface
 */
var TreatmentcontrollerApi = (function (_super) {
    __extends(TreatmentcontrollerApi, _super);
    function TreatmentcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     *
     * @summary Fills actual data about treatment for covid19 positive patients
     * @param personUid Unique Person&#39;s ID (person_uid.person)
     * @param treatmentDto Treatment&#39;s data
     */
    TreatmentcontrollerApi.prototype.putTreatment = function (params, options) {
        return exports.TreatmentcontrollerApiFp.putTreatment(params, options)(this.fetch, this.basePath);
    };
    return TreatmentcontrollerApi;
}(BaseAPI));
exports.TreatmentcontrollerApi = TreatmentcontrollerApi;
;
/**
 * TreatmentcontrollerApi - factory interface
 */
exports.TreatmentcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary Fills actual data about treatment for covid19 positive patients
         * @param personUid Unique Person&#39;s ID (person_uid.person)
         * @param treatmentDto Treatment&#39;s data
         */
        putTreatment: function (params, options) {
            return exports.TreatmentcontrollerApiFp.putTreatment(params, options)(fetch, basePath);
        },
    };
};
