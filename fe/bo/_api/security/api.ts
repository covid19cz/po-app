/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://localhost:8080".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface TokenDto {
    "accessToken"?: string;
    "expiresIn"?: number;
    "refreshToken"?: string;
    "tokenType"?: string;
}



/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = {
    /**
     * Method for generate access and refresh token
     * @param grantType grant type
     * @param password password
     * @param refreshToken refresh token
     * @param username username
     */
    nullUsingPOST(params: {  "grantType": string; "password"?: string; "refreshToken"?: string; "username"?: string; }, options?: any): FetchArgs {
        // verify required parameter "grantType" is set
        if (params["grantType"] == null) {
            throw new Error("Missing required parameter grantType when calling nullUsingPOST");
        }
        const baseUrl = `/oauth/token`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "grant_type": params["grantType"],
            "password": params["password"],
            "refresh_token": params["refreshToken"],
            "username": params["username"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = {
    /**
     * Method for generate access and refresh token
     * @param grantType grant type
     * @param password password
     * @param refreshToken refresh token
     * @param username username
     */
    nullUsingPOST(params: { "grantType": string; "password"?: string; "refreshToken"?: string; "username"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TokenDto> {
        const fetchArgs = DefaultApiFetchParamCreator.nullUsingPOST(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /**
     * Method for generate access and refresh token
     * @param grantType grant type
     * @param password password
     * @param refreshToken refresh token
     * @param username username
     */
    nullUsingPOST(params: {  "grantType": string; "password"?: string; "refreshToken"?: string; "username"?: string; }, options?: any) {
        return DefaultApiFp.nullUsingPOST(params, options)(this.fetch, this.basePath);
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Method for generate access and refresh token
         * @param grantType grant type
         * @param password password
         * @param refreshToken refresh token
         * @param username username
         */
        nullUsingPOST(params: {  "grantType": string; "password"?: string; "refreshToken"?: string; "username"?: string; }, options?: any) {
            return DefaultApiFp.nullUsingPOST(params, options)(fetch, basePath);
        },
    };
};

