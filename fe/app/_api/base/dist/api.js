/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "https://localhost:8080".replace(/\/+$/, "");
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 * CodebookcontrollerApi - fetch parameter creator
 */
exports.CodebookcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary createCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     */
    createCodebookValueUsingPOST: function (params, options) {
        // verify required parameter "codebookName" is set
        if (params["codebookName"] == null) {
            throw new Error("Missing required parameter codebookName when calling createCodebookValueUsingPOST");
        }
        // verify required parameter "codebookValueDto" is set
        if (params["codebookValueDto"] == null) {
            throw new Error("Missing required parameter codebookValueDto when calling createCodebookValueUsingPOST");
        }
        var baseUrl = "/api/codebook/{codebookName}"
            .replace("{" + "codebookName" + "}", "" + params["codebookName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["codebookValueDto"]) {
            fetchOptions.body = JSON.stringify(params["codebookValueDto"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary deleteCodebookValue
     * @param codebookName codebookName
     * @param id id
     */
    deleteCodebookValueUsingDELETE: function (params, options) {
        // verify required parameter "codebookName" is set
        if (params["codebookName"] == null) {
            throw new Error("Missing required parameter codebookName when calling deleteCodebookValueUsingDELETE");
        }
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling deleteCodebookValueUsingDELETE");
        }
        var baseUrl = "/api/codebook/{codebookName}/{id}"
            .replace("{" + "codebookName" + "}", "" + params["codebookName"])
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary findCodebookValues
     * @param codebookName codebookName
     * @param id id
     */
    findCodebookValuesUsingGET: function (params, options) {
        // verify required parameter "codebookName" is set
        if (params["codebookName"] == null) {
            throw new Error("Missing required parameter codebookName when calling findCodebookValuesUsingGET");
        }
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling findCodebookValuesUsingGET");
        }
        var baseUrl = "/api/codebook/{codebookName}/{id}"
            .replace("{" + "codebookName" + "}", "" + params["codebookName"])
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary getCodebookValues
     * @param codebookName codebookName
     */
    getCodebookValuesUsingGET: function (params, options) {
        // verify required parameter "codebookName" is set
        if (params["codebookName"] == null) {
            throw new Error("Missing required parameter codebookName when calling getCodebookValuesUsingGET");
        }
        var baseUrl = "/api/codebook/{codebookName}"
            .replace("{" + "codebookName" + "}", "" + params["codebookName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary updateCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     * @param id id
     */
    updateCodebookValueUsingPUT: function (params, options) {
        // verify required parameter "codebookName" is set
        if (params["codebookName"] == null) {
            throw new Error("Missing required parameter codebookName when calling updateCodebookValueUsingPUT");
        }
        // verify required parameter "codebookValueDto" is set
        if (params["codebookValueDto"] == null) {
            throw new Error("Missing required parameter codebookValueDto when calling updateCodebookValueUsingPUT");
        }
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling updateCodebookValueUsingPUT");
        }
        var baseUrl = "/api/codebook/{codebookName}/{id}"
            .replace("{" + "codebookName" + "}", "" + params["codebookName"])
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["codebookValueDto"]) {
            fetchOptions.body = JSON.stringify(params["codebookValueDto"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * CodebookcontrollerApi - functional programming interface
 */
exports.CodebookcontrollerApiFp = {
    /**
     *
     * @summary createCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     */
    createCodebookValueUsingPOST: function (params, options) {
        var fetchArgs = exports.CodebookcontrollerApiFetchParamCreator.createCodebookValueUsingPOST(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary deleteCodebookValue
     * @param codebookName codebookName
     * @param id id
     */
    deleteCodebookValueUsingDELETE: function (params, options) {
        var fetchArgs = exports.CodebookcontrollerApiFetchParamCreator.deleteCodebookValueUsingDELETE(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary findCodebookValues
     * @param codebookName codebookName
     * @param id id
     */
    findCodebookValuesUsingGET: function (params, options) {
        var fetchArgs = exports.CodebookcontrollerApiFetchParamCreator.findCodebookValuesUsingGET(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary getCodebookValues
     * @param codebookName codebookName
     */
    getCodebookValuesUsingGET: function (params, options) {
        var fetchArgs = exports.CodebookcontrollerApiFetchParamCreator.getCodebookValuesUsingGET(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary updateCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     * @param id id
     */
    updateCodebookValueUsingPUT: function (params, options) {
        var fetchArgs = exports.CodebookcontrollerApiFetchParamCreator.updateCodebookValueUsingPUT(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * CodebookcontrollerApi - object-oriented interface
 */
var CodebookcontrollerApi = (function (_super) {
    __extends(CodebookcontrollerApi, _super);
    function CodebookcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     *
     * @summary createCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     */
    CodebookcontrollerApi.prototype.createCodebookValueUsingPOST = function (params, options) {
        return exports.CodebookcontrollerApiFp.createCodebookValueUsingPOST(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary deleteCodebookValue
     * @param codebookName codebookName
     * @param id id
     */
    CodebookcontrollerApi.prototype.deleteCodebookValueUsingDELETE = function (params, options) {
        return exports.CodebookcontrollerApiFp.deleteCodebookValueUsingDELETE(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary findCodebookValues
     * @param codebookName codebookName
     * @param id id
     */
    CodebookcontrollerApi.prototype.findCodebookValuesUsingGET = function (params, options) {
        return exports.CodebookcontrollerApiFp.findCodebookValuesUsingGET(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary getCodebookValues
     * @param codebookName codebookName
     */
    CodebookcontrollerApi.prototype.getCodebookValuesUsingGET = function (params, options) {
        return exports.CodebookcontrollerApiFp.getCodebookValuesUsingGET(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary updateCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     * @param id id
     */
    CodebookcontrollerApi.prototype.updateCodebookValueUsingPUT = function (params, options) {
        return exports.CodebookcontrollerApiFp.updateCodebookValueUsingPUT(params, options)(this.fetch, this.basePath);
    };
    return CodebookcontrollerApi;
}(BaseAPI));
exports.CodebookcontrollerApi = CodebookcontrollerApi;
;
/**
 * CodebookcontrollerApi - factory interface
 */
exports.CodebookcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary createCodebookValue
         * @param codebookName codebookName
         * @param codebookValueDto codebookValueDto
         */
        createCodebookValueUsingPOST: function (params, options) {
            return exports.CodebookcontrollerApiFp.createCodebookValueUsingPOST(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary deleteCodebookValue
         * @param codebookName codebookName
         * @param id id
         */
        deleteCodebookValueUsingDELETE: function (params, options) {
            return exports.CodebookcontrollerApiFp.deleteCodebookValueUsingDELETE(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary findCodebookValues
         * @param codebookName codebookName
         * @param id id
         */
        findCodebookValuesUsingGET: function (params, options) {
            return exports.CodebookcontrollerApiFp.findCodebookValuesUsingGET(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary getCodebookValues
         * @param codebookName codebookName
         */
        getCodebookValuesUsingGET: function (params, options) {
            return exports.CodebookcontrollerApiFp.getCodebookValuesUsingGET(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary updateCodebookValue
         * @param codebookName codebookName
         * @param codebookValueDto codebookValueDto
         * @param id id
         */
        updateCodebookValueUsingPUT: function (params, options) {
            return exports.CodebookcontrollerApiFp.updateCodebookValueUsingPUT(params, options)(fetch, basePath);
        },
    };
};
