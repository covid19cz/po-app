/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://localhost:8080".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface CodebookValueDto {
    "code"?: string;
    "createdAt"?: Date;
    "id"?: number;
    "modifiedAt"?: Date;
    "name"?: string;
}



/**
 * CodebookcontrollerApi - fetch parameter creator
 */
export const CodebookcontrollerApiFetchParamCreator = {
    /**
     * 
     * @summary createCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     */
    createCodebookValueUsingPOST(params: {  "codebookName": string; "codebookValueDto": CodebookValueDto; }, options?: any): FetchArgs {
        // verify required parameter "codebookName" is set
        if (params["codebookName"] == null) {
            throw new Error("Missing required parameter codebookName when calling createCodebookValueUsingPOST");
        }
        // verify required parameter "codebookValueDto" is set
        if (params["codebookValueDto"] == null) {
            throw new Error("Missing required parameter codebookValueDto when calling createCodebookValueUsingPOST");
        }
        const baseUrl = `/api/codebook/{codebookName}`
            .replace(`{${"codebookName"}}`, `${ params["codebookName"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["codebookValueDto"]) {
            fetchOptions.body = JSON.stringify(params["codebookValueDto"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary deleteCodebookValue
     * @param codebookName codebookName
     * @param id id
     */
    deleteCodebookValueUsingDELETE(params: {  "codebookName": string; "id": number; }, options?: any): FetchArgs {
        // verify required parameter "codebookName" is set
        if (params["codebookName"] == null) {
            throw new Error("Missing required parameter codebookName when calling deleteCodebookValueUsingDELETE");
        }
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling deleteCodebookValueUsingDELETE");
        }
        const baseUrl = `/api/codebook/{codebookName}/{id}`
            .replace(`{${"codebookName"}}`, `${ params["codebookName"] }`)
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary findCodebookValues
     * @param codebookName codebookName
     * @param id id
     */
    findCodebookValuesUsingGET(params: {  "codebookName": string; "id": number; }, options?: any): FetchArgs {
        // verify required parameter "codebookName" is set
        if (params["codebookName"] == null) {
            throw new Error("Missing required parameter codebookName when calling findCodebookValuesUsingGET");
        }
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling findCodebookValuesUsingGET");
        }
        const baseUrl = `/api/codebook/{codebookName}/{id}`
            .replace(`{${"codebookName"}}`, `${ params["codebookName"] }`)
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary getCodebookValues
     * @param codebookName codebookName
     */
    getCodebookValuesUsingGET(params: {  "codebookName": string; }, options?: any): FetchArgs {
        // verify required parameter "codebookName" is set
        if (params["codebookName"] == null) {
            throw new Error("Missing required parameter codebookName when calling getCodebookValuesUsingGET");
        }
        const baseUrl = `/api/codebook/{codebookName}`
            .replace(`{${"codebookName"}}`, `${ params["codebookName"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary updateCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     * @param id id
     */
    updateCodebookValueUsingPUT(params: {  "codebookName": string; "codebookValueDto": CodebookValueDto; "id": number; }, options?: any): FetchArgs {
        // verify required parameter "codebookName" is set
        if (params["codebookName"] == null) {
            throw new Error("Missing required parameter codebookName when calling updateCodebookValueUsingPUT");
        }
        // verify required parameter "codebookValueDto" is set
        if (params["codebookValueDto"] == null) {
            throw new Error("Missing required parameter codebookValueDto when calling updateCodebookValueUsingPUT");
        }
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling updateCodebookValueUsingPUT");
        }
        const baseUrl = `/api/codebook/{codebookName}/{id}`
            .replace(`{${"codebookName"}}`, `${ params["codebookName"] }`)
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["codebookValueDto"]) {
            fetchOptions.body = JSON.stringify(params["codebookValueDto"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * CodebookcontrollerApi - functional programming interface
 */
export const CodebookcontrollerApiFp = {
    /**
     * 
     * @summary createCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     */
    createCodebookValueUsingPOST(params: { "codebookName": string; "codebookValueDto": CodebookValueDto;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CodebookValueDto> {
        const fetchArgs = CodebookcontrollerApiFetchParamCreator.createCodebookValueUsingPOST(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary deleteCodebookValue
     * @param codebookName codebookName
     * @param id id
     */
    deleteCodebookValueUsingDELETE(params: { "codebookName": string; "id": number;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = CodebookcontrollerApiFetchParamCreator.deleteCodebookValueUsingDELETE(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary findCodebookValues
     * @param codebookName codebookName
     * @param id id
     */
    findCodebookValuesUsingGET(params: { "codebookName": string; "id": number;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CodebookValueDto> {
        const fetchArgs = CodebookcontrollerApiFetchParamCreator.findCodebookValuesUsingGET(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary getCodebookValues
     * @param codebookName codebookName
     */
    getCodebookValuesUsingGET(params: { "codebookName": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CodebookValueDto>> {
        const fetchArgs = CodebookcontrollerApiFetchParamCreator.getCodebookValuesUsingGET(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary updateCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     * @param id id
     */
    updateCodebookValueUsingPUT(params: { "codebookName": string; "codebookValueDto": CodebookValueDto; "id": number;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CodebookValueDto> {
        const fetchArgs = CodebookcontrollerApiFetchParamCreator.updateCodebookValueUsingPUT(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * CodebookcontrollerApi - object-oriented interface
 */
export class CodebookcontrollerApi extends BaseAPI {
    /**
     * 
     * @summary createCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     */
    createCodebookValueUsingPOST(params: {  "codebookName": string; "codebookValueDto": CodebookValueDto; }, options?: any) {
        return CodebookcontrollerApiFp.createCodebookValueUsingPOST(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary deleteCodebookValue
     * @param codebookName codebookName
     * @param id id
     */
    deleteCodebookValueUsingDELETE(params: {  "codebookName": string; "id": number; }, options?: any) {
        return CodebookcontrollerApiFp.deleteCodebookValueUsingDELETE(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary findCodebookValues
     * @param codebookName codebookName
     * @param id id
     */
    findCodebookValuesUsingGET(params: {  "codebookName": string; "id": number; }, options?: any) {
        return CodebookcontrollerApiFp.findCodebookValuesUsingGET(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary getCodebookValues
     * @param codebookName codebookName
     */
    getCodebookValuesUsingGET(params: {  "codebookName": string; }, options?: any) {
        return CodebookcontrollerApiFp.getCodebookValuesUsingGET(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary updateCodebookValue
     * @param codebookName codebookName
     * @param codebookValueDto codebookValueDto
     * @param id id
     */
    updateCodebookValueUsingPUT(params: {  "codebookName": string; "codebookValueDto": CodebookValueDto; "id": number; }, options?: any) {
        return CodebookcontrollerApiFp.updateCodebookValueUsingPUT(params, options)(this.fetch, this.basePath);
    }
};

/**
 * CodebookcontrollerApi - factory interface
 */
export const CodebookcontrollerApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary createCodebookValue
         * @param codebookName codebookName
         * @param codebookValueDto codebookValueDto
         */
        createCodebookValueUsingPOST(params: {  "codebookName": string; "codebookValueDto": CodebookValueDto; }, options?: any) {
            return CodebookcontrollerApiFp.createCodebookValueUsingPOST(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary deleteCodebookValue
         * @param codebookName codebookName
         * @param id id
         */
        deleteCodebookValueUsingDELETE(params: {  "codebookName": string; "id": number; }, options?: any) {
            return CodebookcontrollerApiFp.deleteCodebookValueUsingDELETE(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary findCodebookValues
         * @param codebookName codebookName
         * @param id id
         */
        findCodebookValuesUsingGET(params: {  "codebookName": string; "id": number; }, options?: any) {
            return CodebookcontrollerApiFp.findCodebookValuesUsingGET(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getCodebookValues
         * @param codebookName codebookName
         */
        getCodebookValuesUsingGET(params: {  "codebookName": string; }, options?: any) {
            return CodebookcontrollerApiFp.getCodebookValuesUsingGET(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary updateCodebookValue
         * @param codebookName codebookName
         * @param codebookValueDto codebookValueDto
         * @param id id
         */
        updateCodebookValueUsingPUT(params: {  "codebookName": string; "codebookValueDto": CodebookValueDto; "id": number; }, options?: any) {
            return CodebookcontrollerApiFp.updateCodebookValueUsingPUT(params, options)(fetch, basePath);
        },
    };
};

