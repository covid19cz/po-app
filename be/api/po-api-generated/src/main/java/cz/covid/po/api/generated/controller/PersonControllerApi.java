/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cz.covid.po.api.generated.controller;

import cz.covid.po.api.generated.dto.PersonRequest;
import cz.covid.po.api.generated.dto.PersonResponse;
import java.util.UUID;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "PersonController", description = "the PersonController API")
public interface PersonControllerApi {

    Logger log = LoggerFactory.getLogger(PersonControllerApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "GET actual person and health status", nickname = "personsPersonUidGet", notes = "", response = PersonResponse.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={ "person-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = PersonResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/persons/{personUid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PersonResponse> _personsPersonUidGet(@ApiParam(value = "Unique Person's ID (person_uid.person)",required=true) @PathVariable("personUid") UUID personUid) {
        return personsPersonUidGet(personUid);
    }

    // Override this method
    default ResponseEntity<PersonResponse> personsPersonUidGet(UUID personUid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"health_status_last_change\" : \"health_status_last_change\",  \"address_home\" : {    \"city\" : \"city\",    \"street\" : \"street\",    \"street_number_evidence\" : \"street_number_evidence\",    \"street_number_descriptive\" : \"street_number_descriptive\",    \"zip_code\" : \"zip_code\"  },  \"firstname\" : \"firstname\",  \"surname\" : \"surname\",  \"phone_number\" : \"phone_number\",  \"health_status\" : {    \"default\" : true,    \"code\" : \"code\",    \"text\" : \"text\",    \"order\" : 0  },  \"person_uid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",  \"return_hash\" : \"return_hash\",  \"email\" : \"email\"}", PersonResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PersonControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Updates actual person's and health status", nickname = "personsPersonUidPut", notes = "", response = PersonResponse.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={ "person-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = PersonResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/persons/{personUid}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<PersonResponse> _personsPersonUidPut(@ApiParam(value = "Unique Person's ID (person_uid.person)",required=true) @PathVariable("personUid") UUID personUid,@ApiParam(value = "Person's data" ,required=true )  @Valid @RequestBody PersonRequest personDto) {
        return personsPersonUidPut(personUid, personDto);
    }

    // Override this method
    default ResponseEntity<PersonResponse> personsPersonUidPut(UUID personUid,PersonRequest personDto) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"health_status_last_change\" : \"health_status_last_change\",  \"address_home\" : {    \"city\" : \"city\",    \"street\" : \"street\",    \"street_number_evidence\" : \"street_number_evidence\",    \"street_number_descriptive\" : \"street_number_descriptive\",    \"zip_code\" : \"zip_code\"  },  \"firstname\" : \"firstname\",  \"surname\" : \"surname\",  \"phone_number\" : \"phone_number\",  \"health_status\" : {    \"default\" : true,    \"code\" : \"code\",    \"text\" : \"text\",    \"order\" : 0  },  \"person_uid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",  \"return_hash\" : \"return_hash\",  \"email\" : \"email\"}", PersonResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PersonControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
