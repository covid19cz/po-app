/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cz.covid.po.api.generated.controller;

import cz.covid.po.api.generated.dto.CodebookItemDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "CodebookController", description = "the CodebookController API")
public interface CodebookControllerApi {

    Logger log = LoggerFactory.getLogger(CodebookControllerApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "getCodebookItems", nickname = "getCodebookItemsUsingGET", notes = "", response = CodebookItemDto.class, responseContainer = "List", tags={ "codebook-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CodebookItemDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/codebooks/{codebook}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<CodebookItemDto>> _getCodebookItemsUsingGET(@ApiParam(value = "Codebook code",required=true, allowableValues = "\"cbHealthStatus\", \"cbHealthCheckType\"") @PathVariable("codebook") String codebook) {
        return getCodebookItemsUsingGET(codebook);
    }

    // Override this method
    default ResponseEntity<List<CodebookItemDto>> getCodebookItemsUsingGET(String codebook) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"default\" : true,  \"code\" : \"code\",  \"text\" : \"text\",  \"order\" : 0}, {  \"default\" : true,  \"code\" : \"code\",  \"text\" : \"text\",  \"order\" : 0} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CodebookControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
