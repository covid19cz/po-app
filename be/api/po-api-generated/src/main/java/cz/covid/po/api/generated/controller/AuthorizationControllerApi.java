/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cz.covid.po.api.generated.controller;

import cz.covid.po.api.generated.dto.ErrorMessageDto;
import java.util.UUID;
import cz.covid.po.api.generated.dto.VerifyCodeResponseDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "AuthorizationController", description = "the AuthorizationController API")
public interface AuthorizationControllerApi {

    Logger log = LoggerFactory.getLogger(AuthorizationControllerApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Sent SMS with auth code", nickname = "sendCodeUsingPOST", notes = "", authorizations = {
        @Authorization(value = "apiKey")
    }, tags={ "authorization-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/authorizations/send-code",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> _sendCodeUsingPOST(@ApiParam(value = "Uid of person") @Valid @RequestParam(value = "personUid", required = false) UUID personUid) {
        return sendCodeUsingPOST(personUid);
    }

    // Override this method
    default ResponseEntity<Void> sendCodeUsingPOST(UUID personUid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AuthorizationControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Verify code from SMS", nickname = "verifyCodeUsingPOST", notes = "", response = VerifyCodeResponseDto.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={ "authorization-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "SMS code is OK, return password for login", response = VerifyCodeResponseDto.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Some problem with SMS code, see description", response = ErrorMessageDto.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/authorizations/verify-code",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<VerifyCodeResponseDto> _verifyCodeUsingPOST(@ApiParam(value = "Uid of person") @Valid @RequestParam(value = "personUid", required = false) UUID personUid,@ApiParam(value = "Code received in SMS") @Valid @RequestParam(value = "smsCode", required = false) String smsCode) {
        return verifyCodeUsingPOST(personUid, smsCode);
    }

    // Override this method
    default ResponseEntity<VerifyCodeResponseDto> verifyCodeUsingPOST(UUID personUid,String smsCode) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"password\" : \"password\"}", VerifyCodeResponseDto.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AuthorizationControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
