/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cz.covid.po.api.generated.controller;

import cz.covid.po.api.generated.dto.ExposureRequest;
import cz.covid.po.api.generated.dto.HealthCheckDto;
import cz.covid.po.api.generated.dto.HealthCheckResultDto;
import cz.covid.po.api.generated.dto.SymptomsRequest;
import cz.covid.po.api.generated.dto.TestingPlaceInstuctionsDto;
import cz.covid.po.api.generated.dto.TestingPlaceRequest;
import java.util.UUID;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "HealthCheckController", description = "the HealthCheckController API")
public interface HealthCheckControllerApi {

    Logger log = LoggerFactory.getLogger(HealthCheckControllerApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Add result of a health check test", nickname = "postHeathCheckTestResult", notes = "", response = HealthCheckDto.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={ "health-check-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = HealthCheckDto.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/bo/persons/{personUid}/health-check/test-result",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<HealthCheckDto> _postHeathCheckTestResult(@ApiParam(value = "Unique Person's ID (person_uid.person)",required=true) @PathVariable("personUid") UUID personUid,@ApiParam(value = "Health check test result" ,required=true )  @Valid @RequestBody HealthCheckResultDto testResultDto) {
        return postHeathCheckTestResult(personUid, testResultDto);
    }

    // Override this method
    default ResponseEntity<HealthCheckDto> postHeathCheckTestResult(UUID personUid,HealthCheckResultDto testResultDto) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"dryCoughDuration\" : null,  \"healthCheckType\" : {    \"default\" : true,    \"code\" : \"code\",    \"text\" : \"text\",    \"order\" : 0  },  \"finalHealthCheckLocation\" : {    \"default\" : true,    \"code\" : \"code\",    \"text\" : \"text\",    \"order\" : 0  },  \"healthCheckCode\" : \"healthCheckCode\",  \"symtompsSince\" : \"2000-01-23\",  \"infectedInContactDate\" : \"2000-01-23\",  \"infectedPhoneNumbers\" : \"infectedPhoneNumbers\",  \"highTemperatureDuration\" : { },  \"ableToDrive\" : true,  \"infectedInContact\" : \"infectedInContact\",  \"headache\" : true,  \"healthCheckResults\" : [ {    \"resultSentAt\" : \"2000-01-23T04:56:07.000+00:00\",    \"positive\" : true,    \"testDate\" : \"2000-01-23\"  }, {    \"resultSentAt\" : \"2000-01-23T04:56:07.000+00:00\",    \"positive\" : true,    \"testDate\" : \"2000-01-23\"  } ],  \"preferredHealthCheckLocation\" : {    \"default\" : true,    \"code\" : \"code\",    \"text\" : \"text\",    \"order\" : 0  },  \"visitedRiskArea\" : {    \"default\" : true,    \"code\" : \"code\",    \"text\" : \"text\",    \"order\" : 0  }}", HealthCheckDto.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HealthCheckControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Fills exposure form", nickname = "putHealthCheckExposure", notes = "", authorizations = {
        @Authorization(value = "apiKey")
    }, tags={ "health-check-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/app/persons/{personUid}/health-check/exposure",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<Void> _putHealthCheckExposure(@ApiParam(value = "Unique Person's ID (person_uid.person)",required=true) @PathVariable("personUid") UUID personUid,@ApiParam(value = "Health check's data - exposure" ,required=true )  @Valid @RequestBody ExposureRequest exposureDto) {
        return putHealthCheckExposure(personUid, exposureDto);
    }

    // Override this method
    default ResponseEntity<Void> putHealthCheckExposure(UUID personUid,ExposureRequest exposureDto) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HealthCheckControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Fills actual health check form", nickname = "putHealthCheckSymptoms", notes = "", authorizations = {
        @Authorization(value = "apiKey")
    }, tags={ "health-check-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/app/persons/{personUid}/health-check/symptoms",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<Void> _putHealthCheckSymptoms(@ApiParam(value = "Unique Person's ID (person_uid.person)",required=true) @PathVariable("personUid") UUID personUid,@ApiParam(value = "Health check's data - simptoms" ,required=true )  @Valid @RequestBody SymptomsRequest symptomsDto) {
        return putHealthCheckSymptoms(personUid, symptomsDto);
    }

    // Override this method
    default ResponseEntity<Void> putHealthCheckSymptoms(UUID personUid,SymptomsRequest symptomsDto) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HealthCheckControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Fills testing place form", nickname = "putHealthCheckTestingPlace", notes = "", response = TestingPlaceInstuctionsDto.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={ "health-check-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = TestingPlaceInstuctionsDto.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/app/persons/{personUid}/health-check/testing-place",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<TestingPlaceInstuctionsDto> _putHealthCheckTestingPlace(@ApiParam(value = "Unique Person's ID (person_uid.person)",required=true) @PathVariable("personUid") UUID personUid,@ApiParam(value = "Health check's data - testing place" ,required=true )  @Valid @RequestBody TestingPlaceRequest testingPlaceDto) {
        return putHealthCheckTestingPlace(personUid, testingPlaceDto);
    }

    // Override this method
    default ResponseEntity<TestingPlaceInstuctionsDto> putHealthCheckTestingPlace(UUID personUid,TestingPlaceRequest testingPlaceDto) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"address\" : {    \"zipCode\" : \"zipCode\",    \"streetNumberEvidence\" : \"streetNumberEvidence\",    \"city\" : \"city\",    \"street\" : \"street\",    \"streetNumberDescriptive\" : \"streetNumberDescriptive\"  },  \"openingHours\" : \"openingHours\"}", TestingPlaceInstuctionsDto.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default HealthCheckControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
