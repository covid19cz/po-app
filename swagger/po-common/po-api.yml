swagger: '2.0'
info:
  version: 0.0.1
  title: Covid19 Citizen Portal
  description: Covid19 Citizen Portal
host: covid19.int.xcp
basePath: /api/v1
schemes:
  - https
  - http
tags:
  - name: person-controller
    description: Controller for Person data
  - name: health-check-controller
    description: Controller for Person's health check
  - name: treatment-controller
    description: Controller for treatment
  - name: authorization-controller
    description: Controller for Authorization
securityDefinitions:
  apiKey:
    type: apiKey
    name: Authorization
    in: header
paths:
  '/persons/{personUid}':
    get:
      tags:
        - person-controller
      summary: GET actual person and health status
      description: ''
      produces:
        - application/json
      parameters:
        - name: personUid
          in: path
          description: Unique Person's ID (person_uid.person)
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/PersonResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - apiKey: []
    put:
      tags:
        - person-controller
      summary: Updates actual person's and health status
      description: ''
      produces:
        - application/json
      parameters:
        - name: personUid
          in: path
          description: Unique Person's ID (person_uid.person)
          required: true
          type: string
          format: uuid
        - in: body
          name: personDto
          description: Person's data
          required: true
          schema:
            $ref: '#/definitions/PersonRequest'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/PersonResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - apiKey: []
  '/persons/{personUid}/health-check/symptoms':
    put:
      tags:
        - health-check-controller
      summary: Fills actual health check form
      description: ''
      produces:
        - application/json
      parameters:
        - name: personUid
          in: path
          description: Unique Person's ID (person_uid.person)
          required: true
          type: string
          format: uuid
        - in: body
          name: simptomsDto
          description: Health check's data - simptoms
          required: true
          schema:
            $ref: '#/definitions/SimtompsRequest'
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - apiKey: []
  '/persons/{personUid}/health-check/exposure':
    put:
      tags:
        - health-check-controller
      summary: Fills exposure form
      description: ''
      produces:
        - application/json
      parameters:
        - name: personUid
          in: path
          description: Unique Person's ID (person_uid.person)
          required: true
          type: string
          format: uuid
        - in: body
          name: exposureDto
          description: Health check's data - exposure
          required: true
          schema:
            $ref: '#/definitions/ExposureRequest'
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - apiKey: []
  '/persons/{personUid}/health-check/testing-place':
    put:
      tags:
        - health-check-controller
      summary: Fills testing place form
      description: ''
      produces:
        - application/json
      parameters:
        - name: personUid
          in: path
          description: Unique Person's ID (person_uid.person)
          required: true
          type: string
          format: uuid
        - in: body
          name: testingPlaceDto
          description: Health check's data - testing place
          required: true
          schema:
            $ref: '#/definitions/TestingPlaceRequest'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/TestingPlaceInstuctionsDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - apiKey: []
  '/persons/{personUid}/treatment':
    put:
      tags:
        - treatment-controller
      summary: Fills actual data about treatment for covid19 positive patients
      description: ''
      produces:
        - application/json
      parameters:
        - name: personUid
          in: path
          description: Unique Person's ID (person_uid.person)
          required: true
          type: string
          format: uuid
        - in: body
          name: TreatmentDto
          description: Treatment's data
          required: true
          schema:
            $ref: '#/definitions/TreatmentRequest'
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - apiKey: []
  /authorizations/send-code:
    post:
      tags:
        - authorization-controller
      summary: Sent SMS with auth code
      operationId: sendCodeUsingPOST
      produces:
        - application/json
      parameters:
        - in: body
          name: sendCodeRequest
          description: send sms login request dto
          required: true
          schema:
            $ref: '#/definitions/SendCodeRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SendCodeResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - apiKey: []
      deprecated: false
  /authorizations/verify-code:
    post:
      tags:
        - authorization-controller
      summary: Verify code from SMS
      operationId: verifyCodeUsingPOST
      produces:
        - application/json
      parameters:
        - name: personUid
          in: query
          description: Uid of person
          required: false
          type: string
          format: uuid
          allowEmptyValue: false
        - name: smsCode
          in: query
          description: Code received in SMS
          required: false
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: 'SMS code is OK, return password for login'
          schema:
            $ref: '#/definitions/VerifyCodeResponseDto'
        '201':
          description: Created
        '400':
          description: 'Some problem with SMS code, see description'
          schema:
            $ref: '#/definitions/ErrorMessageDto'
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - apiKey: []
      deprecated: false
definitions:
  PersonResponse:
    type: object
    properties:
      personUid:
        type: string
        format: uuid
      returnHash:
        type: string
      phoneNumber:
        type: string
      firstname:
        type: string
      surname:
        type: string
      addressHome:
        $ref: '#/definitions/Address'
      email:
        type: string
      healthStatus:
        $ref: '#/definitions/CodebookItemDto'
      healthStatusLastChange:
        type: string
        format: date
  PersonRequest:
    type: object
    properties:
      firstname:
        type: string
      surname:
        type: string
      addressHome:
        $ref: '#/definitions/Address'
      email:
        type: string
  SimtompsRequest:
    type: object
    properties:
      symtompsSince:
        type: string
        format: date
      highTemperatureDuration:
        type: integer
      dryCoughDuration:
        type: integer
      headache:
        type: boolean
  ExposureRequest:
    type: object
    properties:
      infectedInContact:
        type: string
        enum:
          - 'Y'
          - 'N'
          - '?'
      infectedInContactDate:
        type: string
        format: date
      infectedPhoneNumbers:
        type: string
      visitedRiskArea:
        $ref: '#/definitions/CodebookItemDto'
  TestingPlaceRequest:
    type: object
    properties:
      preferredHealthCheckLocation:
        $ref: '#/definitions/CodebookItemDto'
      ableToDrive:
        type: boolean
  HealthCheckRequest:
    type: object
    properties:
      symtompsSince:
        type: string
        format: date
      highTemperatureDuration:
        type: integer
      dryCoughDuration:
        type: integer
      headache:
        type: boolean
      infectedInContact:
        type: string
        enum:
          - 'Y'
          - 'N'
          - '?'
      infectedInContactDate:
        type: string
        format: date
      infectedPhoneNumbers:
        type: string
      visitedRiskArea:
        $ref: '#/definitions/CodebookItemDto'
      preferredHealthCheckLocation:
        $ref: '#/definitions/CodebookItemDto'
      ableToDrive:
        type: boolean
  HealthCheckResponse:
    type: object
    properties:
      timeSlot:
        type: string
      address:
        type: string
      healthCheckCode:
        type: string
  TreatmentRequest:
    type: object
    properties:
      place:
        $ref: '#/definitions/CodebookItemDto'
      address:
        $ref: '#/definitions/Address'
      healthCheckDate:
        type: string
        format: date
      healthCheckLocation:
        $ref: '#/definitions/CodebookItemDto'
      expectedInfectionDate:
        type: string
        format: date
      inContactPhoneNumbers:
        type: string
  Address:
    type: object
    properties:
      street:
        type: string
      streetNumberDescriptive:
        type: string
      streetNumberEvidence:
        type: string
      city:
        type: string
      zipCode:
        type: string
  CodebookItemDto:
    type: object
    properties:
      code:
        type: string
      default:
        type: boolean
      order:
        type: integer
        format: int32
      text:
        type: string
    title: CodebookItemDto
  VerifyCodeResponseDto:
    type: object
    properties:
      password:
        type: string
        description: New password
    title: VerifyCodeResponseDto
    description: Sms code verification response
  ErrorMessageDto:
    type: object
    properties:
      additionalMessages:
        type: object
      errorCode:
        type: string
        enum:
          - SMS_CODE_GEN_ERROR
          - UNAUTHORIZED
          - UNKNOWN
          - ERROR_LOGIN_REQUIRED
      message:
        type: string
    title: ErrorMessageDto

  TestingPlaceInstuctionsDto:
    type: object
    properties:
      address:
        $ref: '#/definitions/Address'
      openingHours:
        type: string

  SendCodeRequest:
    type: object
    properties:
      phoneNumber:
        type: string
        description: 'Phone number'

  SendCodeResponse:
    type: object
    properties:
      personUid:
        type: string
        format: uuid
        description: 'Unique Person''s ID (person_uid.person)'
